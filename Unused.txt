    # # Check if the path forward is blocked on the future position
    # def is_Valid(self, position, direction):
    #     if position in self.obstacles or position in [elem[2] for elem in self.holes.values()]:
    #         return False
    #     else:
    #         north, south, west, east = (position[0] + 1, position[1]), (position[0] - 1, position[1]), (
    #             position[0], position[1] - 1), (position[0], position[1] + 1)
    #         coming_from = self.coming_direction(direction)
    #         valid_pos = {el: True for el in ['North', 'South', 'West', 'East']}
    #         #if not self.is_Holding_Tile[0]:
    #         if north in self.obstacles or north in [elem[2] for elem in self.holes.values()] or not (
    #                     north[0] - 1 >= 0 and north[0] - 1 < self.H and north[1] >= 0 and north[1] < self.W):
    #                 valid_pos['North'] = False
    #         if south in self.obstacles or south in [elem[2] for elem in self.holes.values()] or not (
    #                     south[0] + 1 >= 0 and south[0] + 1 < self.H and south[0] >= 0 and south[0] < self.W):
    #                 valid_pos['South'] = False
    #         if west in self.obstacles or west in [elem[2] for elem in self.holes.values()] or not (
    #                     west[0] >= 0 and west[0] < self.H and west[1] - 1 >= 0 and west[1] - 1 < self.W):
    #                 valid_pos['West'] = False
    #         if east in self.obstacles or east in [elem[2] for elem in self.holes.values()] or not (
    #                     east[0] >= 0 and east[0] < self.H and east[0] + 1 >= 0 and east[0] + 1 < self.W):
    #                 valid_pos['East'] = False
    #         # else:
    #         #     if north in self.obstacles or not (
    #         #             north[0] - 1 >= 0 and north[0] - 1 < self.H and north[1] >= 0 and north[1] < self.W):
    #         #         valid_pos['North'] = False
    #         #     if south in self.obstacles or not (
    #         #             0 <= south[0] + 1 < self.H and 0 <= south[0] < self.W):
    #         #         valid_pos['South'] = False
    #         #     if west in self.obstacles or not (
    #         #             west[0] >= 0 and west[0] < self.H and west[1] - 1 >= 0 and west[1] - 1 < self.W):
    #         #         valid_pos['West'] = False
    #         #     if east in self.obstacles or not (
    #         #             east[0] >= 0 and east[0] < self.H and east[0] + 1 >= 0 and east[0] + 1 < self.W):
    #         #         valid_pos['East'] = False

    #         valid_pos = {k: v for k, v in valid_pos.items() if k != coming_from}
    #         return False if all(val == False for val in valid_pos.values()) else True
